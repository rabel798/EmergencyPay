import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Transaction } from '@shared/schema';
import { useAppContext } from '@/context/AppContext';

interface TransactionDetailsModalProps {
  transaction: Transaction | null;
  onClose: () => void;
}

const TransactionDetailsModal: React.FC<TransactionDetailsModalProps> = ({ 
  transaction, 
  onClose 
}) => {
  const { currentUser, merchants } = useAppContext();
  
  if (!transaction) return null;
  
  // Determine if this was a payment or receipt based on sender/receiver
  const isPayment = transaction.sender_id === currentUser?.id;
  
  // Get merchant info if available
  const merchantId = isPayment ? transaction.receiver_id : transaction.sender_id;
  const merchant = merchants.find(m => m.user_id === merchantId);
  
  // Format amount and date
  const formattedAmount = new Intl.NumberFormat('en-IN', {
    style: 'currency',
    currency: 'INR'
  }).format(Number(transaction.amount));
  
  const formattedDate = transaction.timestamp 
    ? new Date(transaction.timestamp.toString()).toLocaleDateString('en-IN', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
      })
    : '--';
  
  const formattedTime = transaction.timestamp
    ? new Date(transaction.timestamp.toString()).toLocaleTimeString('en-IN', {
        hour: 'numeric',
        minute: '2-digit',
        hour12: true
      })
    : '--';
    
  // Determine status color
  const getStatusColor = () => {
    if (transaction.status === 'completed') return 'text-green-600';
    if (transaction.status === 'pending') return 'text-amber-600';
    return 'text-red-600';
  };
  
  const getStatusIcon = () => {
    if (transaction.status === 'completed') return 'ri-checkbox-circle-fill';
    if (transaction.status === 'pending') return 'ri-time-line';
    return 'ri-close-circle-fill';
  };
  
  const getStatusBadgeColor = () => {
    if (transaction.status === 'completed') return 'bg-green-100 text-green-800';
    if (transaction.status === 'pending') return 'bg-amber-100 text-amber-800';
    return 'bg-red-100 text-red-800';
  };

  const getTransactionTitle = () => {
    // If we have a merchant, use that name
    if (merchant) {
      if (isPayment) {
        return `Payment to ${merchant.name}`;
      } else {
        return `Payment from ${merchant.name}`;
      }
    }
    
    // Fallback
    if (isPayment) {
      return `Transfer to User #${transaction.receiver_id}`;
    } else {
      return `Received from User #${transaction.sender_id}`;
    }
  };
  
  // Handle share receipt functionality
  const handleShareReceipt = async () => {
    if (!transaction) return;
    
    // Get party name (merchant or user)
    const partyName = merchant 
      ? merchant.name 
      : (isPayment ? `User #${transaction.receiver_id}` : `User #${transaction.sender_id}`);
    
    // Create receipt text
    const receiptText = `
Payment Receipt - EmergencyPay
--------------------------
Amount: ${formattedAmount}
${isPayment ? 'Paid to' : 'Received from'}: ${partyName}
${merchant?.category ? `Category: ${merchant.category.charAt(0).toUpperCase() + merchant.category.slice(1)}` : ''}
Date: ${formattedDate}
Time: ${formattedTime}
Method: ${transaction.is_offline 
  ? (transaction.method === 'BLUETOOTH' ? 'Bluetooth Payment' : 'QR Code (Offline)') 
  : 'UPI Payment'}
Transaction ID: ${transaction.transaction_code || `TXN${transaction.id}`}
Status: ${transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}
--------------------------
This receipt was generated by EmergencyPay.
    `.trim();

    // Check if Web Share API is available
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'EmergencyPay Receipt',
          text: receiptText,
        });
      } catch (error) {
        // User likely canceled the share operation
        console.error('Error sharing receipt:', error);
        // Fallback to clipboard
        await copyToClipboard(receiptText);
      }
    } else {
      // Fallback for browsers without Web Share API
      await copyToClipboard(receiptText);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      alert('Receipt copied to clipboard');
    } catch (error) {
      console.error('Failed to copy receipt to clipboard:', error);
      alert('Could not copy receipt to clipboard. Please try again.');
    }
  };
  
  return (
    <motion.div
      className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div
        className="bg-white rounded-xl max-w-md w-full overflow-hidden"
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="p-4 border-b border-gray-200 flex justify-between items-center">
          <h3 className="text-lg font-medium">Transaction Details</h3>
          <button 
            onClick={onClose}
            className="h-8 w-8 flex items-center justify-center rounded-full hover:bg-gray-100"
          >
            <i className="ri-close-line text-xl"></i>
          </button>
        </div>
        
        {/* Content */}
        <div className="p-4">
          <div className="mb-5 pb-5 border-b border-gray-200">
            <h4 className="text-sm text-gray-500 mb-1">TRANSACTION</h4>
            <div className="flex justify-between items-center">
              <h3 className="text-xl font-medium">{getTransactionTitle()}</h3>
              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadgeColor()}`}>
                <i className={`${getStatusIcon()} mr-1`}></i>
                {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}
              </span>
            </div>
            <p className="text-sm text-gray-500 mt-1">{formattedDate} at {formattedTime}</p>
          </div>
          
          <div className="mb-5 pb-5 border-b border-gray-200">
            <h4 className="text-sm text-gray-500 mb-1">AMOUNT</h4>
            <p className="text-2xl font-semibold">
              {formattedAmount} 
              <span className={`ml-2 ${isPayment ? 'text-primary' : 'text-amber-600'}`}>
                {isPayment ? 'Paid' : 'Received'}
              </span>
            </p>
          </div>
          
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600">Payment Type</span>
              <span className="font-medium">
                {transaction.is_offline ? (
                  <span className="text-emergency-600 font-semibold flex items-center">
                    {transaction.method === 'BLUETOOTH' ? (
                      <>
                        <i className="ri-bluetooth-line mr-1"></i> Bluetooth Payment
                      </>
                    ) : (
                      <>
                        <i className="ri-qr-code-line mr-1"></i> QR Code (Offline)
                      </>
                    )}
                  </span>
                ) : (
                  <span className="text-green-600 font-semibold flex items-center">
                    <i className="ri-bank-line mr-1"></i> UPI Payment
                  </span>
                )}
              </span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-600">{isPayment ? 'Sent From' : 'Received In'}</span>
              <span className="font-medium">
                {isPayment ? 'Your Account' : 'Your Account'}
              </span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-600">{isPayment ? 'Sent To' : 'Received From'}</span>
              <span className="font-medium">
                {merchant ? merchant.name : (isPayment ? `User #${transaction.receiver_id}` : `User #${transaction.sender_id}`)}
              </span>
            </div>
            
            {transaction.transaction_code && (
              <div className="flex justify-between">
                <span className="text-gray-600">Transaction Code</span>
                <span className="font-medium">{transaction.transaction_code}</span>
              </div>
            )}
          </div>
        </div>
        
        {/* Action Buttons */}
        <div className="p-4 border-t border-gray-200 flex space-x-2">
          <button 
            onClick={onClose}
            className="flex-1 py-2 rounded-lg border border-gray-300 font-medium"
          >
            Close
          </button>
          <button 
            onClick={handleShareReceipt}
            className="flex-1 py-2 rounded-lg bg-primary text-white font-medium flex items-center justify-center"
          >
            <i className="ri-share-line mr-1"></i>
            Share Receipt
          </button>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default TransactionDetailsModal;